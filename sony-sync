#!/bin/bash
#
# Copyright (C) 2018 Choose-a Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

path=$(pwd);
config="${path}/utils/sony-sync/sony-list";
url="gerrit.omnirom.org"
port="29418"
revision="android-9.0";
username=${GERRIT_USERNAME};
aosp_rev=$(
    cat android/default.xml | \
    grep "default revision" | \
    awk -F\/  '{print $3}'  | \
    sed -e 's/"//g');

# Gerrit Username
if [ -z "$username" ]; then
    echo -e "Enter the gerrit username";
    read username;
fi

# Check location
if [ ! -f ${config} ]; then
    echo "ERROR: This script should be called from Android root folder";
    exit 1;
fi

# Reading config file
while read line; do
    # skip commented lines
    case "$line" in \#*) continue ;; esac

    parameters=4;
    project=$(echo ${line} | awk -F\  '{print $1}');
    remote=$(echo ${line} | awk -F\  '{print $2}');
    branch=$(echo ${line} | awk -F\  '{print $3}');
    gerrit=$(echo ${line} | awk -F\  '{print $4}');

    validator=${parameters};
    if [ "${project}" == "" ] ; then ((validator--)); fi;
    if [ "${remote}" == "" ] ; then ((validator--)); fi;
    if [ "${branch}" == "" ] ; then ((validator--)); fi;
    if [ "${gerrit}" == "" ] ; then ((validator--)); fi;

    # Fetch current aosp revision
    if [ "${branch}" == "aosp" ] ; then
        branch=$aosp_rev;
    fi

    if [ $validator == $parameters ] ; then

        # Check filter
        if [ -z "$1" ]; then
            filtered=0;
        else
            filtered=1;
            if !(echo ${project} | grep ${1} > /dev/null) ; then
                continue;
            else
                ((found++));
            fi
        fi

        echo "===============================================================";
        echo "PROJECT: $project";
        echo "===============================================================";

        cd $path;
        rm -fr $project;
        echo "repo sync --force-sync -d -c $project";
        ret=$(repo sync -f --force-sync -d -c $project 2>&1);
        makefiles=$(ls -1 ${project} 2>/dev/null | wc -l);

        if [ $makefiles != 0 ] ; then
            cd $project;
            push_gerrit=1;
            unset ret;
            echo "";
            echo "git pull $remote $branch";
            ret=$(git pull $remote $branch 2>&1);

            case "$ret" in  
                *"Already up-to-date"*) push_gerrit=0; echo "Repo already up-to-date!";; 
                *"CONFLICT"*) push_gerrit=0; echo "WARNING: Merge conflict!";; 
            esac

            if [ $push_gerrit == 1 ] ; then
                echo "";
                echo "git push --no-thin ssh://${username}@${url}:${port}/${gerrit} HEAD:refs/heads/${revision}";
                git push --no-thin ssh://${username}@${url}:${port}/${gerrit} HEAD:refs/heads/${revision};
            fi
        else
            cd $path;
            rm -fr $project;
            echo "Warning: This project is not present in manifests it seems."
        fi
        echo "";
    fi

done < ${config}

if [ $filtered == 1 ] ; then
    if [ $found == 0 ] ; then
        echo "Project not found!";
    fi
fi
